<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://challenge19.github.io/</id>
    <title>呆思不呆</title>
    <updated>2019-09-10T18:21:19.661Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://challenge19.github.io/"/>
    <link rel="self" href="https://challenge19.github.io//atom.xml"/>
    <subtitle>呆思的博客</subtitle>
    <logo>https://challenge19.github.io//images/avatar.png</logo>
    <icon>https://challenge19.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 呆思不呆</rights>
    <entry>
        <title type="html"><![CDATA[实现python网络图的可交互]]></title>
        <id>https://challenge19.github.io//post/python-networkx-pyqtgraph</id>
        <link href="https://challenge19.github.io//post/python-networkx-pyqtgraph">
        </link>
        <updated>2019-09-10T15:27:44.000Z</updated>
        <content type="html"><![CDATA[<p><strong>实现网络图中的节点可以随意拖动。</strong></p>
<h2 id="解决方案">解决方案</h2>
<ol>
<li><a href="https://github.com/jsexauer/networkx_viewer">networkx_viewer</a>：暂停开发比较久
<ol>
<li>networkx</li>
<li>tk</li>
</ol>
</li>
<li>基于<a href="http://pyqtgraph.org/documentation/index.html">pyqtgraph</a>
<ol>
<li><a href="https://stackoverflow.com/questions/35328916/embedding-a-networkx-graph-into-pyqt-widget">示例</a></li>
</ol>
</li>
</ol>
<pre><code class="language-python"># -*- coding: utf-8 -*-
#classname:DrawGraph
#menuname:Draw Network
&quot;&quot;&quot;
Simple example of subclassing GraphItem.
&quot;&quot;&quot;
import sys
import pyqtgraph as pg
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import numpy as np
import random
import networkx as nx
import pandas as pd

# Enable antialiasing for prettier plots
#pg.setConfigOptions(antialias=True)

class DrawGraph(QMainWindow):
    def __init__(self, parent=None,file_map='',file_net=''):
        QMainWindow.__init__(self, parent)
        self.setWindowTitle('Demo: Draw Network')
        self.mw = pg.PlotWidget()#background=QColor(255,255,255))
        self.mw.setAspectLocked(lock=True, ratio=1)
        self.setCentralWidget(self.mw)
        self.showMaximized()
        self.mw.getPlotItem().showAxis('bottom', show=False)
        self.mw.getPlotItem().showAxis('left', show=False)
        self.g = Graph()
        self.G=None
        self.mw.addItem(self.g)
        self.filemap = file_map
        if file_map!='' and file_net!='':
            self.on_draw(file_map,file_net)
        
        self.create_menu()
        
    def create_action(  self, text, slot=None, shortcut=None, 
                        icon=None, tip=None, checkable=False, 
                        signal=&quot;triggered()&quot;):
        action = QAction(text, self)
        if icon is not None:
            action.setIcon(QIcon(&quot;:/%s.png&quot; % icon))
        if shortcut is not None:
            action.setShortcut(shortcut)
        if tip is not None:
            action.setToolTip(tip)
            action.setStatusTip(tip)
        if slot is not None:
            action.triggered.connect(slot)
        if checkable:
            action.setCheckable(True)
        return action
        
    def create_menu(self):        
        self.file_menu = self.menuBar().addMenu(&quot;&amp;File&quot;)
        load_file_action = self.create_action(&quot;&amp;Open Network File&quot;,
            shortcut=&quot;Ctrl+O&quot;, slot=self.open_network,tip=&quot;Open Network File&quot;)
        quit_action = self.create_action(&quot;&amp;Quit&quot;, slot=self.close, 
            shortcut=&quot;Ctrl+Q&quot;, tip=&quot;Close the application&quot;)
        self.add_actions(self.file_menu, (load_file_action, None, quit_action))
    

    def add_actions(self, target, actions):
        for action in actions:
            if action is None:
                target.addSeparator()
            else:
                target.addAction(action)        
                
    def open_network(self):
        file_choices = &quot;Network File (*.gml)&quot;
        path = unicode(QFileDialog.getOpenFileName(self, 'Open file', '', file_choices))
        if path:
            self.on_draw(path)
 
########################################################
            
    def on_draw(self,file_map,file_net):
       # print(file_map)
        self.G = nx.Graph()
        df_edges = pd.read_csv(file_net,sep='\t',header=None,names=['s','t','w'])
        edgelist = [(df_edges.loc[idx,'s']-1,df_edges.loc[idx,'t']-1,df_edges.loc[idx,'w']) for idx in df_edges.index]
        #print(edgelist)
        self.G.add_weighted_edges_from(edgelist)
        df_nodes = pd.read_csv(file_map,sep='\t')
        self.dfnodes = df_nodes.copy()
        def map_color(df):
            import matplotlib as mpl
            import matplotlib.cm as cm
            import matplotlib.colors as colors
            norm = mpl.colors.Normalize(vmin=1, vmax=df['cluster'].max())
            cmap = cm.tab10
            m = cm.ScalarMappable(norm=norm, cmap=cmap)
            df['color'] = df['cluster'].apply(lambda x:m.to_rgba(x))
            return df

        df_nodes = map_color(df_nodes)
        for idx in df_nodes.index:
            i = df_nodes.loc[idx,'id']-1
            label = df_nodes.loc[idx,'label']
            cluster = df_nodes.loc[idx,'cluster']
            self.G.nodes[i]['label'] = label
            self.G.nodes[i]['cluster'] = cluster
            self.G.nodes[i]['pos'] = [df_nodes.loc[idx,'x'],df_nodes.loc[idx,'y']]
            self.G.nodes[i]['color'] = df_nodes.loc[idx,'color']

#        self.G.pos=nx.layout.spring_layout(self.G)
        poslist=[]
        texts=[]
        sizes=[]
        maxsize=0.3
        minsize=0.01
        zooma=(maxsize-minsize)/(float(max(dict(self.G.degree).values()))+float(min(dict(self.G.degree).values())))
        zoomb=(float(max(dict(self.G.degree).values()))*minsize-float(min(dict(self.G.degree).values()))*maxsize)/(maxsize-minsize)
        for node in sorted(self.G.nodes()):
            poslist.append(self.G.nodes[node]['pos'])
            texts.append(self.G.node[node]['label'])
            sizes.append((self.G.degree(node)*0.005))
        pos = np.array(poslist, dtype=float)
        
        adjlist=[]
        linelist=[]
        for edge in self.G.edges():
            adjlist.append(edge)
            linelist.append((125,125,125,122,1))
        adj = np.array(adjlist)
        NodeColors=[QColor(self.G.nodes[i]['color'][0]*255,self.G.nodes[i]['color'][1]*255,self.G.nodes[i]['color'][2]*255) for i in self.G.nodes]
        lines = np.array(linelist, dtype=[('red',np.ubyte),('green',np.ubyte),('blue',np.ubyte),('alpha',np.ubyte),('width',float)])
        self.g.setData(pos=pos, adj=adj, pxMode=False, size=sizes, pen=lines,symbolPen=NodeColors,symbolBrush=NodeColors, text=texts)



class Graph(pg.GraphItem):
    def __init__(self):
        self.dragPoint = None
        self.dragOffset = None
        self.textItems = []
        pg.GraphItem.__init__(self)
        #self.scatter.sigClicked.connect(self.clicked)
        
    def setData(self, **kwds):
        self.text = kwds.pop('text', [])
        self.data = kwds
        if 'pos' in self.data:
            npts = self.data['pos'].shape[0]
            self.data['data'] = np.empty(npts, dtype=[('index', int)])
            self.data['data']['index'] = np.arange(npts)
        self.setTexts(self.text)
        self.updateGraph()
        
    def setTexts(self, text):
        for i in self.textItems:
            i.scene().removeItem(i)
        self.textItems = []
        for t in text:
            item = pg.TextItem(t)
            self.textItems.append(item)
            item.setParentItem(self)
        
    def updateGraph(self):
        pg.GraphItem.setData(self, **self.data)
        for i,item in enumerate(self.textItems):
            item.setPos(*self.data['pos'][i])
        
        
    def mouseDragEvent(self, ev):
        if ev.button() != Qt.LeftButton:
            ev.ignore()
            return
        
        if ev.isStart():
            pos = ev.buttonDownPos()
            pts = self.scatter.pointsAt(pos)
            if len(pts) == 0:
                ev.ignore()
                return
            self.dragPoint = pts[0]
            ind = pts[0].data()[0]
            self.dragOffset = self.data['pos'][ind] - pos
        elif ev.isFinish():
            self.dragPoint = None
            return
        else:
            if self.dragPoint is None:
                ev.ignore()
                return
        
        ind = self.dragPoint.data()[0]
        self.data['pos'][ind] = ev.pos() + self.dragOffset
        self.updateGraph()
        ev.accept()
        
def main():
    app = QApplication(sys.argv)
    form = DrawGraph()
    form.show()
    app.exec_()

if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://challenge19.github.io//post/hello-gridea</id>
        <link href="https://challenge19.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>