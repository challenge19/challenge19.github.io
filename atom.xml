<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://challenge19.github.io/</id>
    <title>呆思不呆</title>
    <updated>2019-09-19T14:12:52.140Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://challenge19.github.io/"/>
    <link rel="self" href="https://challenge19.github.io//atom.xml"/>
    <subtitle>呆思的博客</subtitle>
    <logo>https://challenge19.github.io//images/avatar.png</logo>
    <icon>https://challenge19.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 呆思不呆</rights>
    <entry>
        <title type="html"><![CDATA[视频测试]]></title>
        <id>https://challenge19.github.io//post/shi-pin-ce-shi</id>
        <link href="https://challenge19.github.io//post/shi-pin-ce-shi">
        </link>
        <updated>2019-09-19T14:00:45.000Z</updated>
        <content type="html"><![CDATA[<iframe
height=450 
width=800 
src="//player.bilibili.com/player.html?aid=6501371&cid=10574945&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> 
</iframe>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用Markdown完成写作]]></title>
        <id>https://challenge19.github.io//post/li-yong-markdown-wan-cheng-xie-zuo</id>
        <link href="https://challenge19.github.io//post/li-yong-markdown-wan-cheng-xie-zuo">
        </link>
        <updated>2019-09-13T04:27:06.000Z</updated>
        <summary type="html"><![CDATA[<p>markdown记录生活</p>
]]></summary>
        <content type="html"><![CDATA[<p>markdown记录生活</p>
<!-- more -->
<p>markdown在工作和生活写作中使用频率逐渐升高，除了利用markdown写博客（结合Gridea+Githb pages）外，以下是我常用的几个markdown工具：</p>
<ol>
<li>利用markdown实现微信公众号的<a href="https://lab.lyric.im/wxformat/">排版</a></li>
<li>利用markdown<a href="">制作ppt</a></li>
<li>印象笔记markdown写笔记</li>
<li>Jupyter Notebook的markdown功能进行科研记录</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现python网络图的可交互]]></title>
        <id>https://challenge19.github.io//post/python-networkx-pyqtgraph</id>
        <link href="https://challenge19.github.io//post/python-networkx-pyqtgraph">
        </link>
        <updated>2019-09-10T15:27:44.000Z</updated>
        <summary type="html"><![CDATA[<p>python networkx + pyqtgraph实现交互式网络图</p>
]]></summary>
        <content type="html"><![CDATA[<p>python networkx + pyqtgraph实现交互式网络图</p>
<!-- more -->
<p><strong>实现网络图中的节点可以随意拖动。</strong></p>
<h2 id="解决方案">解决方案</h2>
<ol>
<li><a href="https://github.com/jsexauer/networkx_viewer">networkx_viewer</a>：暂停开发比较久
<ol>
<li>networkx</li>
<li>tk</li>
</ol>
</li>
<li>基于<a href="http://pyqtgraph.org/documentation/index.html">pyqtgraph</a>
<ol>
<li><a href="https://stackoverflow.com/questions/35328916/embedding-a-networkx-graph-into-pyqt-widget">示例</a></li>
</ol>
</li>
</ol>
<pre><code class="language-python"># -*- coding: utf-8 -*-

import sys
import pyqtgraph as pg
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import numpy as np
import networkx as nx
import random
# Enable antialiasing for prettier plots
#pg.setConfigOptions(antialias=True)

class DrawGraph(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)
        self.setWindowTitle('NetViz')
        self.mw = pg.PlotWidget()#background=QColor(255,255,255))
        self.mw.setAspectLocked(lock=True, ratio=1)
        self.setCentralWidget(self.mw)
        self.showMaximized()
        self.mw.getPlotItem().showAxis('bottom', show=False)
        self.mw.getPlotItem().showAxis('left', show=False)
        self.g = Graph()
        self.G=None
        self.mw.addItem(self.g)


        self.create_menu()


    def create_action(  self, text, slot=None, shortcut=None,
                        icon=None, tip=None, checkable=False,
                        signal=&quot;triggered()&quot;):
        action = QAction(text, self)
        if icon is not None:
            action.setIcon(QIcon(&quot;:/%s.png&quot; % icon))
        if shortcut is not None:
            action.setShortcut(shortcut)
        if tip is not None:
            action.setToolTip(tip)
            action.setStatusTip(tip)
        if slot is not None:
            action.triggered.connect(slot)
            #self.connect(action, SIGNAL(signal), slot)
        if checkable:
            action.setCheckable(True)
        return action


    def create_menu(self):
        self.file_menu = self.menuBar().addMenu(&quot;&amp;File&quot;)
        load_file_action = self.create_action(&quot;&amp;Open Network File&quot;,
            shortcut=&quot;Ctrl+O&quot;, slot=self.open_network,tip=&quot;Open Network File&quot;)
        load_model_action = self.create_action(&quot;&amp;Karate_club&quot;,
            slot=self.zk_network,tip=&quot;Using Karate club graph&quot;)
        quit_action = self.create_action(&quot;&amp;Quit&quot;, slot=self.close,
            shortcut=&quot;Ctrl+Q&quot;, tip=&quot;Close the application&quot;)
        self.add_actions(self.file_menu, (load_file_action, None,load_model_action, quit_action))


    def add_actions(self, target, actions):
        for action in actions:
            if action is None:
                target.addSeparator()
            else:
                target.addAction(action)

    def open_network(self):
        file_choices = &quot;Network File (*.gml)&quot;
        path = QFileDialog.getOpenFileName(self, 'Open file', '', file_choices)
        if path:
            G=nx.read_gml(filename[0])
            self.on_draw(G)

    def zk_network(self):
        G=nx.karate_club_graph()
        self.on_draw(G)

########################################################
    def on_draw(self,G):
        self.G = G
        self.G.pos=nx.layout.spring_layout(self.G)
        poslist=[]
        texts=[]
        sizes=[]
        for node in sorted(self.G.nodes()):
            poslist.append(self.G.pos[node]) # node position
            texts.append(str(node)) # node label
            sizes.append(self.G.degree(node)*0.005) # node size
        pos = np.array(poslist, dtype=float)

        adjlist=[]
        linelist=[]
        for edge in self.G.edges():
            adjlist.append(edge)
            linelist.append((125,125,125,122,1))
        adj = np.array(adjlist)
        NodeColors=[QColor(random.randint(1,255), random.randint(1,255),random.randint(1,255)) for i in range(self.G.number_of_nodes())]
        lines = np.array(linelist, dtype=[('red',np.ubyte),('green',np.ubyte),('blue',np.ubyte),('alpha',np.ubyte),('width',float)])
        self.g.setData(pos=pos, adj=adj,pxMode=False,size=sizes,pen=lines,symbolPen=NodeColors,symbolBrush=NodeColors, text=texts)


class Graph(pg.GraphItem):
    def __init__(self):
        self.dragPoint = None
        self.dragOffset = None
        self.textItems = []
        pg.GraphItem.__init__(self)

    def setData(self, **kwds):
        self.text = kwds.pop('text', [])
        self.data = kwds
        if 'pos' in self.data:
            npts = self.data['pos'].shape[0]
            self.data['data'] = np.empty(npts, dtype=[('index', int)])
            self.data['data']['index'] = np.arange(npts)
        self.setTexts(self.text)
        self.updateGraph()

    def setTexts(self, text):
        for i in self.textItems:
            i.scene().removeItem(i)
        self.textItems = []
        for t in text:
            item = pg.TextItem(t)
            self.textItems.append(item)
            item.setParentItem(self)

    def updateGraph(self):
        pg.GraphItem.setData(self, **self.data)
        for i,item in enumerate(self.textItems):
            item.setPos(*self.data['pos'][i])


    def mouseDragEvent(self, ev):
        if ev.button() != Qt.LeftButton:
            ev.ignore()
            return

        if ev.isStart():
            pos = ev.buttonDownPos()
            pts = self.scatter.pointsAt(pos)
            if len(pts) == 0:
                ev.ignore()
                return
            self.dragPoint = pts[0]
            ind = pts[0].data()[0]
            self.dragOffset = self.data['pos'][ind] - pos
        elif ev.isFinish():
            self.dragPoint = None
            return
        else:
            if self.dragPoint is None:
                ev.ignore()
                return

        ind = self.dragPoint.data()[0]
        self.data['pos'][ind] = ev.pos() + self.dragOffset
        self.updateGraph()
        ev.accept()


def main():
    app = QApplication(sys.argv)
    form = DrawGraph()
    form.show()
    app.exec_()

if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://challenge19.github.io//post/hello-gridea</id>
        <link href="https://challenge19.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>